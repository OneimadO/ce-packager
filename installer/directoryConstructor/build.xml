<?xml version="1.0" encoding="UTF-8"?>
<project name="Directory Constructor" default="Construct">
	<taskdef name="foreachxmlelementtask" classpath="../lib" classname="phing.ForEachXmlElementTask" />
	
	<target name="Init">
		<property name="actions.makeDir" value="false" />
		<property name="actions.fetchCode" value="false" />
		<property name="actions.setPermissions" value="false" />
	</target>
	
	<target name="Construct">
		<property name="actions.makeDir" value="true" override="true" />
		<property name="actions.fetchCode" value="true" override="true" />
		<property name="actions.setPermissions" value="true" override="true" />
		
		<phingcall target="Construct tree" />
	</target>
	
	<target name="Update permissions" depends="Init">
		<property name="actions.setPermissions" value="true" override="true" />
		<phingcall target="Construct tree" />
	</target>
	
	<target name="Update code" depends="Init">
		<property name="actions.fetchCode" value="true" override="true" />
		
		<phingcall target="Construct tree" />
	</target>
	
	<target name="Make directories" depends="Init">
		<property name="actions.makeDir" value="true" override="true" />
		<phingcall target="Construct tree" />
	</target>
	
	<target name="Load configuration">
		<property file="build.properties" override="false" />
	</target>
	
	<target name="Construct tree" depends="Load configuration">
		<echo message="Construct Kaltura directories tree [${BASE_DIR}]" />
		<foreachxmlelementtask file="${xml.uri}" skipRoot="false" xPathSkipRoot="false" elementPrefix="directory" xPathParam="directory.path" target="Construct directory" />
	</target>
    
	<target name="Construct directory">
		
		<property name="directory.fullPath" value="${BASE_DIR}${directory.path}" />
		<echo message="Construct directory [${directory.fullPath}]" />
		
		<!-- Create directory -->
		<available file="${directory.fullPath}" type="dir" property="directory.exists" />
		<if>
			<istrue value="${actions.makeDir}" />
			<then>
				<if>
					<equals arg1="${directory.exists}" arg2="true" />
					<then>
						<echo message="Directory [${directory.fullPath}] already exists" />
					</then>
					<else>
						<mkdir dir="${directory.fullPath}" />
					</else>
				</if>
			</then>
		</if>
		<resolvepath propertyName="directory.fullPath" file="${directory.fullPath}" />
		
		<!-- Get directory contnet -->
		<if>
			<istrue value="${actions.fetchCode}" />
			<then>
				<if>
					<isset property="directory.attributes.${directory.id}.gitPath" />
					<then>
						<if>
							<isset property="directory.attributes.${directory.id}.gitTag" />
							<then>
								<echo message="Fetch git repository [${directory.fullPath}] tag [${directory.attributes.${directory.id}.gitTag}]" />
								<property name="directory.gitTagUrl" value="${git.protocol}://${git.domain}${directory.attributes.${directory.id}.gitPath}/tarball/${directory.attributes.${directory.id}.gitTag}" />
								<httpget url="${directory.gitTagUrl}" dir="${directory.fullPath}/../" followRedirects="true" sslVerifyPeer="false" />
								<resolvepath propertyName="tar" file="${directory.fullPath}/../${directory.attributes.${directory.id}.gitTag}"/>
								<untar file="${tar}" todir="${directory.fullPath}" />
								<delete file="${tar}" />
							</then>
							<else>
								<available file="${directory.fullPath}/.git" type="dir" property="directory.git.exists" />
								<if>
									<equals arg1="${directory.git.exists}" arg2="true" />
									<then>
										<echo message="Pull git repository [${directory.fullPath}]" />
										<gitpull gitPath="git" all="true" repository="${directory.fullPath}" strategy="recursive" />
									</then>
									<else>
										<echo message="Clone from git URL [${directory.gitUrl}]" />
										<property name="directory.gitUrl" value="${git.protocol}://${git.domain}${directory.attributes.${directory.id}.gitPath}" />
										<gitclone gitPath="git" repository="${directory.gitUrl}" targetPath="${directory.fullPath}" />
									</else>
								</if>
							</else>
						</if>
					</then>
				</if>
			</then>
		</if>
		
		<if>
			<istrue value="${actions.setPermissions}" />
			<then>
				<phingcall target="Set permissions folder" />
			</then>
		</if>
	</target>
	
	<target name="Set permissions file">

		<!-- TODO - make sure it's not a folder -->		
		<echo message="Set folder [${directory.fullPath}] file [${filename}] permissions [${currentMode}]" />
		<if>
			<!-- change mode -->
			<isset property="currentMode" />
			<then>
				<chmod file="${directory.fullPath}/${filename}" mode="${currentMode}" failonerror="${permissions.required}" />
			</then>
		</if>
		
	</target>
	
	<target name="Set permissions folder">
		
		<!-- Change directory permissions and ownership -->
		<if>
			<!-- user default value -->
			<isset property="permissions.user" />
			<then>
				<property name="user" value="${permissions.user}" override="true" />
			</then>
		</if>
		<if>
			<!-- group default value -->
			<isset property="permissions.group" />
			<then>
				<property name="group" value="${permissions.group}" override="true" />
			</then>
		</if>
		<if>
			<!-- user value from xml -->
			<isset property="directory.attributes.${directory.id}.user" />
			<then>
				<property name="user" value="${directory.attributes.${directory.id}.user}" override="true" />
			</then>
		</if>
		<if>
			<!-- group value from xml -->
			<isset property="directory.attributes.${directory.id}.group" />
			<then>
				<property name="group" value="${directory.attributes.${directory.id}.group}" override="true" />
			</then>
		</if>
		<if>
			<!-- change user and group -->
			<and>
				<isset property="user" />
				<isset property="group" />
			</and>
			<then>
				<echo message="Change directory [${directory.fullPath}] group [${group}] and user [${user}]" />
				<chown file="${directory.fullPath}" user="${user}.${group}" failonerror="${permissions.required}" />
				<if>
					<not><isset property="directory.attributes.${directory.id}.skipFilesOwner" /></not>
					<then>
						<chown user="${user}.${group}" failonerror="${permissions.required}" >
							<fileset dir="${directory.fullPath}" defaultexcludes="false" />
						</chown>
					</then>
				</if>
			</then>
		</if>
		
		<if>
			<!-- default mode value from properties -->
			<not><isset property="mode" /></not>
			<then>
				<property name="mode" value="${permissions.mode.directory}" override="true" />
			</then>
		</if>
		<if>
			<!-- mode value from xml -->
			<isset property="directory.attributes.${directory.id}.mode" />
			<then>
				<property name="mode" value="${directory.attributes.${directory.id}.mode}" override="true" />
			</then>
		</if>
		
		<if>
			<!-- default mode value from properties -->
			<not><isset property="filesMode" /></not>
			<then>
				<property name="filesMode" value="${permissions.mode.content}" override="true" />
			</then>
		</if>
		<if>
			<!-- mode value from xml -->
			<isset property="directory.attributes.${directory.id}.filesMode" />
			<then>
				<property name="filesMode" value="${directory.attributes.${directory.id}.filesMode}" override="true" />
			</then>
		</if>
		
		<if>
			<!-- default mode value from properties -->
			<not><isset property="scriptsMode" /></not>
			<then>
				<property name="scriptsMode" value="${permissions.mode.scripts}" override="true" />
			</then>
		</if>
		<if>
			<!-- mode value from xml -->
			<isset property="directory.attributes.${directory.id}.scriptsMode" />
			<then>
				<property name="scriptsMode" value="${directory.attributes.${directory.id}.scriptsMode}" override="true" />
			</then>
		</if>
		
		<echo message="Set directory [${directory.fullPath}] permissions [${mode}]" />
		<chmod file="${directory.fullPath}" mode="${mode}" failonerror="${permissions.required}" />
		<if>
			<not><isset property="directory.attributes.${directory.id}.skipFilesMode" /></not>
			<then>
				
				<chmod mode="${mode}" failonerror="${permissions.required}">
					<fileset dir="${directory.fullPath}" defaultexcludes="false">
						<type type="dir" />
					</fileset>
				</chmod>
				
				<chmod mode="${filesMode}" failonerror="${permissions.required}">
					<fileset dir="${directory.fullPath}" defaultexcludes="false" excludes="${permissions.mode.scripts.pattern}">
						<type type="file" />
					</fileset>
				</chmod>
				
				<chmod mode="${scriptsMode}" failonerror="${permissions.required}">
					<fileset dir="${directory.fullPath}" defaultexcludes="false" includes="${permissions.mode.scripts.pattern}">
						<type type="file" />
					</fileset>
				</chmod>
				
			</then>
		</if>
		
	</target>
	
</project>